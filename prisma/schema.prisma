datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Product {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String
  price         Float
  brand         String
  category      String
  inStock       Boolean
  images        String
  reviews       Review[]
}

model Review {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @db.ObjectId
  productId     String    @db.ObjectId
  rating        Int
  comment       String
  createdDate   DateTime  @default(now())

  product Product @relation(fields: [productId], references: [id])
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  hashedPassword String?
  createdAt     DateTime  @default(now())
  updateAt     DateTime?  @updatedAt
  role          Role      @default(USER)

  accounts      Account[]
  reviews       Review[]
  orders        Order[]
}

model Order{
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  userId       String    @db.ObjectId
  amount       Float
  currency     String
  status       String
  deliveryStatus String?
  createDate   DateTime @default(now())
  paymentIntentId  String @unique
  products     CartProductProps[]
  address      Address?

  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)

}

type CartProductProps{
  id String
  name String
  description String
  category String
  price Float
  quantity Int
  image String
  inStock Boolean
}

// model Image {
//   id         String   @id @default(auto()) @map("_id") @db.ObjectId
//   url        String
//   productId  String   @db.ObjectId
//   product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
// }

type Address{
  city String
  country String
  line1 String
  line2 String?
  posta1_code String
  state String
}

enum Role {
    USER
    ADMIN
}
